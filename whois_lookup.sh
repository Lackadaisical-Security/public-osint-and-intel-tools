#!/bin/bash
#
# WHOIS Lookup Tool - Standalone Bash Script
# Lackadaisical Security - https://lackadaisical-security.com/
# Works on Linux/Mac with standard tools

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Banner
echo -e "${CYAN}"
echo "============================================================"
echo "      WHOIS Lookup Tool - Lackadaisical Security"
echo "      https://lackadaisical-security.com/"
echo "============================================================"
echo -e "${NC}"

# Check arguments
if [ $# -eq 0 ]; then
    echo "Usage: $0 <domain/IP> [output_file]"
    echo "Example: $0 example.com"
    echo "         $0 8.8.8.8 results.txt"
    exit 1
fi

TARGET=$1
OUTPUT_FILE=$2
TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')

echo -e "${YELLOW}Target: ${TARGET}${NC}"
echo -e "${YELLOW}Timestamp: ${TIMESTAMP}${NC}\n"

# Function to check if target is IP
is_ip() {
    if [[ $1 =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
        return 0
    else
        return 1
    fi
}

# Function to perform WHOIS lookup
perform_whois() {
    local target=$1
    echo -e "${BLUE}[*] Performing WHOIS lookup...${NC}"
    
    # Check if whois command exists
    if ! command -v whois &> /dev/null; then
        echo -e "${RED}[-] whois command not found. Please install it.${NC}"
        exit 1
    fi
    
    # Perform WHOIS lookup
    WHOIS_DATA=$(whois "$target" 2>/dev/null)
    
    if [ -z "$WHOIS_DATA" ]; then
        echo -e "${RED}[-] WHOIS lookup failed${NC}"
        return 1
    fi
    
    # Parse important fields
    echo -e "\n${GREEN}[+] WHOIS Information:${NC}"
    echo "================================"
    
    # Domain specific fields
    if ! is_ip "$target"; then
        # Registrar
        registrar=$(echo "$WHOIS_DATA" | grep -i "^Registrar:" | head -1 | cut -d: -f2- | xargs)
        [ ! -z "$registrar" ] && echo -e "${CYAN}Registrar:${NC} $registrar"
        
        # Creation date
        created=$(echo "$WHOIS_DATA" | grep -i "Creation Date\|Created" | head -1 | cut -d: -f2- | xargs)
        [ ! -z "$created" ] && echo -e "${CYAN}Created:${NC} $created"
        
        # Expiry date
        expires=$(echo "$WHOIS_DATA" | grep -i "Expir" | head -1 | cut -d: -f2- | xargs)
        [ ! -z "$expires" ] && echo -e "${CYAN}Expires:${NC} $expires"
        
        # Name servers
        echo -e "\n${CYAN}Name Servers:${NC}"
        echo "$WHOIS_DATA" | grep -i "Name Server" | cut -d: -f2- | xargs | while read ns; do
            echo "  - $ns"
        done
        
        # Status
        echo -e "\n${CYAN}Domain Status:${NC}"
        echo "$WHOIS_DATA" | grep -i "Status:" | cut -d: -f2- | xargs | sort -u | while read status; do
            echo "  - $status"
        done
    else
        # IP specific fields
        # Network range
        netrange=$(echo "$WHOIS_DATA" | grep -i "NetRange\|inetnum" | head -1 | cut -d: -f2- | xargs)
        [ ! -z "$netrange" ] && echo -e "${CYAN}Network Range:${NC} $netrange"
        
        # Organization
        org=$(echo "$WHOIS_DATA" | grep -i "^OrgName\|^org-name" | head -1 | cut -d: -f2- | xargs)
        [ ! -z "$org" ] && echo -e "${CYAN}Organization:${NC} $org"
        
        # Country
        country=$(echo "$WHOIS_DATA" | grep -i "^Country" | head -1 | cut -d: -f2- | xargs)
        [ ! -z "$country" ] && echo -e "${CYAN}Country:${NC} $country"
    fi
    
    # Emails found
    echo -e "\n${CYAN}Contact Emails:${NC}"
    emails=$(echo "$WHOIS_DATA" | grep -E -o "\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b" | sort -u)
    if [ ! -z "$emails" ]; then
        echo "$emails" | while read email; do
            echo "  - $email"
        done
    else
        echo "  None found"
    fi
    
    # Save raw data if output file specified
    if [ ! -z "$OUTPUT_FILE" ]; then
        {
            echo "WHOIS Lookup Results"
            echo "===================="
            echo "Target: $TARGET"
            echo "Timestamp: $TIMESTAMP"
            echo "Generated by Lackadaisical Security"
            echo ""
            echo "$WHOIS_DATA"
        } > "$OUTPUT_FILE"
        echo -e "\n${GREEN}[+] Full results saved to: $OUTPUT_FILE${NC}"
    fi
    
    return 0
}

# Function to get additional DNS info
get_dns_info() {
    local target=$1
    echo -e "\n${BLUE}[*] Getting DNS information...${NC}"
    
    if ! is_ip "$target"; then
        # Get A records
        a_records=$(dig +short A "$target" 2>/dev/null)
        if [ ! -z "$a_records" ]; then
            echo -e "${CYAN}A Records:${NC}"
            echo "$a_records" | while read ip; do
                echo "  - $ip"
            done
        fi
        
        # Get MX records
        mx_records=$(dig +short MX "$target" 2>/dev/null | sort -n)
        if [ ! -z "$mx_records" ]; then
            echo -e "${CYAN}MX Records:${NC}"
            echo "$mx_records" | while read mx; do
                echo "  - $mx"
            done
        fi
    else
        # Reverse DNS for IP
        ptr=$(dig +short -x "$target" 2>/dev/null)
        if [ ! -z "$ptr" ]; then
            echo -e "${CYAN}Reverse DNS:${NC} $ptr"
        fi
    fi
}

# Function to check related domains
check_related_domains() {
    local domain=$1
    
    if is_ip "$domain"; then
        return
    fi
    
    echo -e "\n${BLUE}[*] Checking related domains...${NC}"
    
    # Extract base domain
    base_domain=$(echo "$domain" | sed 's/^www\.//')
    
    # Common variations
    variations=("www.$base_domain" "mail.$base_domain" "ftp.$base_domain" "api.$base_domain")
    
    for var in "${variations[@]}"; do
        if [ "$var" != "$domain" ]; then
            ip=$(dig +short A "$var" 2>/dev/null | head -1)
            if [ ! -z "$ip" ]; then
                echo -e "${GREEN}[+] Found: $var -> $ip${NC}"
            fi
        fi
    done
}

# Main execution
perform_whois "$TARGET"
get_dns_info "$TARGET"
check_related_domains "$TARGET"

echo -e "\n${CYAN}============================================================${NC}"
echo -e "${CYAN}Scan completed by Lackadaisical Security${NC}"
echo -e "${CYAN}https://lackadaisical-security.com/${NC}"
echo -e "${CYAN}============================================================${NC}"
